#+TITLE: CPP implementation Notes
* Dependencies for the tests
(To be moved later to a proper location)
- ~CMake > 3.5~
- a recent version of ~g++~
  (tested with ~g++~ 10.2)
- ~boost/test~
  (tested with version 1.75 and 1.76
  of the whole boost suite);
- ~lcov~ for coverage report generation
  (the ~gcov~ backend
  should be already included
  in the distribution of gcc).


* ~std::vector~ vs ~std::array~
In general, I decided
to use ~std::vector~ for collections everywhere.
I tried to use ~std::array~
when I believed that it was possible
to determine the size at compile time,
but that assumption turned out to be wrong
most of the times.
Switching from ~std::vector~ to ~std::array~
to increase type safety might be done incrementally.
When possible, some choices will be made
to make the code versatile enough
so that the switch is easier.

* Size vs Coordinate vs Index
Sizes and coordinates are semantically different
but are at the moment represented
by ~std::vector<int>~ anyway.
A type alias ~Coordinates~ is used
to make the code more self-descriptive
(no type constraints are enforced
by the compiler, though).
An Index is like a coordinate
but not in the physical space.
At the moment there is no way
to distinguish between the two.
There might not be need
to distinguish between the two at all.
I have added an ~Indices~ type alias
as for ~Coordinates~ to make things clearer to the reader.

* Differences with the Python versions
** General remarks
The C++ code will be, in detail, more imperative
than the python one
because of the lack of list comprehensions
(C++20 ranges would help in this regard,
but it's still early).
** Q1D
The Q1D partitioner has been split into
a ~periodic~ and an ~open~ class.

* ~None~'s in ~C++~
A way to represent missing values in ~C++~
would be to use ~std::optional~,
but it's C++17 and some compilers/libraries
might not support that yet.

* Tests and hypothesis
** Testing Partitioning classes
The base class for all 1D partitioning classes
is an abstract class and thus cannot be instanced,
but contains some code that needs to be tested.
It will be tested in the child classes.

** Notes on random numbers
For simplicity, we use ~std::rand()~ from ~cstdlib~.
Quality of random numbers is not of concern here.

** Random int vector generator
A random int vector generator has been implemented
(~rilist~ for brevity)
that fits the "concept" of data generator
(as required by ~boost/test~):
- has an ~arity~ enum
- has a ~begin()~ method
  that returns a forward iterator
  (the iterator class is implemented idiomatically
  as an class internal to ~rilist~).
  The "concept" of forward iterator is
- Has a ~size()~ method.
In addition to implementing those internal properties,
we also need to "register" the class
with the ~is_dataset~ metafunction.
See [[https://www.boost.org/doc/libs/1_76_0/libs/test/doc/html/boost_test/tests_organization/test_cases/test_case_generation/datasets.html][the example from the official documentation]].

Since we are also returning vectors of ~int~,
we need to make sure that those values can be printed
for logging purposes, as described [[https://www.boost.org/doc/libs/1_76_0/libs/test/doc/html/boost_test/test_output/test_tools_support_for_logging/testing_tool_output_disable.html][here]].
To this purpose, an overload of ~std::operator<<~
is provided.
** Testing with input->output
A good way to implement these tests
seems to be to use ~boost::unit_test::data~,
and the idioms associated to that.
I get some hard-to-decipher compilation errors though,
so I'll just have a loop on cases
with a ~BOOST_TEST~ at each iteration.


* Notes on ~eo.hpp~
Outside of test cases,
the dimension of the lattice is known at compile time,
so we would use ~std::array~,
but in the tests we want to make sure
the algorithms work for any number of dimensions,
so we just fall back to ~std::vector~.

* Coverage
Coverage is assessed
using GCC/G++ gcov library and lcov html/css frontend.
I try to keep coverage as high as possible.
In order to track the coverage of compiled code correctly,
the coverage compiler flags need to be used
not only when compiling the libraries,
but also when compiling some the tests,
as some template instantiations happen only in such tests.
This requires as well scanning
the ~tests~ build directory for results,
which increases report generation times.
It moreover adds the test code
to the report,
which is undesirable.
It is possible to force the templates to be instantiated
in some source files instead.
This might be worth investigating.
