#+TITLE: CPP implementation Notes

These notes contain also thoughts
on how to improve the design.

The notes might be vague on some details
as the details are likely to change.

* Dependencies for the tests
(To be moved later to a proper location)
- ~CMake > 3.5~
- a recent version of ~g++~
  (tested with ~g++~ 10.2)
- ~boost/test~
  (tested with version 1.75 and 1.76
  of the whole boost suite);
- ~lcov~ for coverage report generation
  (the ~gcov~ backend
  should be already included
  in the distribution of gcc).

* ~std::vector~ vs ~std::array~
In general, I decided
to use ~std::vector~ for collections everywhere.
~std::array~ could be used when it is possible
to determine the size at compile time,
but that assumption turned out to be wrong
most of the times.
Switching from ~std::vector~ to ~std::array~
to increase type safety might be done incrementally.
When possible, some choices will be made
to make the code versatile enough
so that the switch is easier.

* Size vs Coordinate vs Index
Sizes and coordinates are semantically different
but are at the moment represented
by ~std::vector<int>~ anyway.
A type alias ~Coordinates~ is used
to make the code more self-descriptive
(no type constraints are enforced
by the compiler, though).
An Index is like a coordinate
but not in the physical space.
At the moment there is no way
to distinguish between the two.
There might not be need
to distinguish between the two at all.
I have added an ~Indices~ type alias
as for ~Coordinates~ to make things clearer to the reader.

* Implementation of trees
There are 3 kind of trees we need:
1. Trees where the children are organised in a "set",
   i.e., when the order of the subtrees does not count
   and there is no label associated with a subtree:
   this is the case for the tree of indices
   that is returned by ~get_indices_tree_with_ghosts~;
2. Trees where the children are organised in a "list",
   i.e., where the order of the subtrees count
   and the labels are just integers
   that go from 0 to a maximum value:
   this is the case for the trees created by
   ~get_partition_tree~.
3. Treest where the children are organised in a "map",
   i.e., where the subtrees are associated to an index
   and the set of values that this index takes
   is not contiguos:
   this is the case for the trees created
   by, e.g., ~get_max_idx_tree~
   and all the functions in ~partition_tree_allocations.hpp~.
All trees are implemented as a structure
that contains a node and std::vector children.
In the case 3, the node is a structure containing
an ~int~ and a value.
**NOTE**: it could have been better to use instead
a ~std::map<int,Value>~ for storing the children.
This would have fit perfectly case 3,
a bit worse case 2,
and not quite case 1.
Notably, though, case 2 and 3
are the most frequent and most important cases
in the library.

* Tests and hypothesis
** Testing Partitioning classes
The base class for all 1D partitioning classes
is an abstract class and thus cannot be instanced,
but contains some code that needs to be tested.
It will be tested in the child classes.

** Notes on random numbers
For simplicity, we use ~std::rand()~ from ~cstdlib~.
Quality of random numbers is not of concern here.

** Random int vector generator
A random int vector generator has been implemented
(~rilist~ for brevity)
that fits the "concept" of data generator
(as required by ~boost/test~):
- has an ~arity~ enum
- has a ~begin()~ method
  that returns a forward iterator
  (the iterator class is implemented idiomatically
  as an class internal to ~rilist~).
  The "concept" of forward iterator is
- Has a ~size()~ method.
In addition to implementing those internal properties,
we also need to "register" the class
with the ~is_dataset~ metafunction.
See [[https://www.boost.org/doc/libs/1_76_0/libs/test/doc/html/boost_test/tests_organization/test_cases/test_case_generation/datasets.html][the example from the official documentation]].

Since we are also returning vectors of ~int~,
we need to make sure that those values can be printed
for logging purposes, as described [[https://www.boost.org/doc/libs/1_76_0/libs/test/doc/html/boost_test/test_output/test_tools_support_for_logging/testing_tool_output_disable.html][here]].
To this purpose, an overload of ~std::operator<<~
is provided.
** Testing with input->output
A good way to implement these tests
seems to be to use ~boost::unit_test::data~,
and the idioms associated to that.
I get some hard-to-decipher compilation errors though,
so I'll just have a loop on cases
with a ~BOOST_TEST~ at each iteration.


* Notes on ~eo.hpp~
Outside of test cases,
the dimension of the lattice is known at compile time,
so we would use ~std::array~,
but in the tests we want to make sure
the algorithms work for any number of dimensions,
so we just fall back to ~std::vector~.

* Coverage
Coverage is assessed
using GCC/G++ gcov library and lcov html/css frontend.
I try to keep coverage as high as possible.
In order to track the coverage of compiled code correctly,
the coverage compiler flags need to be used
not only when compiling the libraries,
but also when compiling some the tests,
as some template instantiations happen only in such tests.
This requires as well scanning
the ~tests~ build directory for results,
which increases report generation times.
It moreover adds the test code
to the report,
which is undesirable.
It is possible to force the templates to be instantiated
in some source files instead.
This might be worth investigating.
** Troubleshooting
Known reasons for some functions
not displaying full coverage:
1. The function is not actually called everywhere.
   Trivial case, but it happened to me,
   so it is worth understanding
   if case 1. or 2. happened instead.
2. The function is a template
   and the compilation unit
   where it is actually instantiated
   is not covered by ~lcov~.
3. When the compiler can inline functions
   lcov might not detect the function call.
   This can happen when
   the function is passed as a function pointer
   as a template argument.
   When using the ~Release~ build type,
   inlining might happen.
   In this case, the function call might disappear
   but the body of the function is covered anyway.

* Memoisation
 Many of the algorithm in the ~tree.hpp~ library use [[https://en.wikipedia.org/wiki/Memoization][memoisation]]
 to avoid the time and memory penalties of tree recursion
 (which would make the algorithm definitely too expensive
 to be of any use).
 The saving happen mostly because
 **pointers** are used to represent tree nodes,
 and such pointers are used as key in the memoisation map.
 This allows to detect easily
 if a given node has been processed
 and if so, to retrieve the result
 of the function call on that pointer.
 Technically, this means that the tree
 is actually a directed acyclic graph
 (with some additional properties,
 like that all the paths that connect two nodes
 have the same length).

 Since it may not always be the case
 that the memoised version is faster,
 the non-memoised version of the function is left.

 A common pattern is used for all the memoised functions:
 a ~base~ function is defined, of the kind
 #+begin_src C++
RetType base(std::function<RetType(ArgTypes...)> f, //
             ArgTypes... args);
 #+end_src
 In the non memoised version, we have
 #+begin_src C++
RetType nomemo(ArgTypes... args) { return base(nomemo, args...); }
 #+end_src
 While in the memoised version, we have
 #+begin_src C++
RetType memoised(ArgTypes... args) {
  Memo m;
  return base(m, args...);
}
 #+end_src
 Where ~Memo~ is a class that encapsulate the ~Memoiser~ template.

 **NOTE**: There might be nicer ways to do this,
 that require less code duplication.
 A better implementation is left for the future.
